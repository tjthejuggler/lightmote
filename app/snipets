val recorder = MediaRecorder()

Log.d("amp2", "amp2");

while (true){
//            val msg: Message = mHandler.obtainMessage()
    val b = Bundle()
    try {
        sleep(250)
    } catch (e: InterruptedException) {
        // TODO Auto-generated catch block
        e.printStackTrace()
    }
    if (recorder != null) {
        val amplitude = recorder.maxAmplitude
        b.putLong("currentTime", amplitude.toLong())
        Log.i("AMPLITUDE", amplitude.toString())
    } else {
        b.putLong("currentTime", 0)
    }
//            msg.data = b
//            mHandler.sendMessage(msg)

}

val colorwheels = arrayOf(
        findViewById(R.id.color_picker_view),
        findViewById(R.id.color_picker_view2),
        findViewById<ColorPickerView>(R.id.color_picker_view3)
)
for (i in 0..2) {
    colorwheels[i].addOnColorChangedListener(OnColorChangedListener { selectedColor ->
        sendColorChange(ipAddresses[i], getRgbFromHex(Integer.toHexString(selectedColor)), i)
        ColorPickerDialogBuilder
                .with(this)
                .setTitle("Choose color")

                .wheelType(ColorPickerView.WHEEL_TYPE.FLOWER)
                .density(12)
                .setOnColorSelectedListener { selectedColor -> Toast(this) }

                .setNegativeButton("cancel") { dialog, which -> }
                .build()
                .show()
    })
}


//    private val myLongListener: View.OnLongClickListener = object : View.OnLongClickListener {
//        override fun onLongClick(v: View?) {
//            val tag: Any = v.getTag()
//            val buttonIndex = tag as Int
//            var ipIndex: Int = 0
//            when {
//                buttonIndex < 7 -> ipIndex = 0
//                buttonIndex in 7..13 -> ipIndex = 1
//                buttonIndex in 14..20 -> ipIndex = 2
//            }
//            sendColorChange(ipAddresses[ipIndex], colors[buttonIndex], buttonIndex)
//            // Do something depending on the value of the tag
//        }
//
//
//    }